/* --------------------  REXX Program  ----------------------------- */
 ver = '3.13'
/* ------------------ DO NOT NUMBER IN ISPF ------------------------ *
 | Name:       zTSOHELP                                              |
 |                                                                   |
 | Function:   Present the user with a table of available            |
 |             TSO HELP pages from which the user may select         |
 |             to browse.                                            |
 |                                                                   |
 | Syntax:     %zTSOHELP help-command  /w  /t                        |
 |                                                                   |
 |             help-command is optional and will position the        |
 |             list at that command (or close to it)                 |
 |                                                                   |
 |             /t will include notelines for imbeds                  |
 |                                                                   |
 |             /w will generate a warning message for any            |
 |             help entries that do not exist and thus were          |
 |             not added to the table                                |
 |                                                                   |
 | Commands:   Locate cmd next                                       |
 |             Only string                                           |
 |             Refresh                                               |
 |             RL    (repeat locate)                                 |
 |             S command                                             |
 |             SEt                                                   |
 |             Sort column order                                     |
 |                                                                   |
 | Notes:      The Description field is scrollable when the cursor   |
 |             is in the field. This is to support descriptions      |
 |             greater than 53 characters if they exist.             |
 |                                                                   |
 | Command Table:  It is recommended that an ISPF Command Table      |
 |                 entry be created to make it faster to get to      |
 |                 this application. This is a sample:               |
 |                                                                   |
 |                 Verb    TSOH                                      |
 |                 Trunc:  0                                         |
 |                 Action: SELECT CMD(%ZTSOHELP &ZPARM) NEWAPPL(ISR) |
 |                 Desc:   TSO Help ISPF Application                 |
 |                                                                   |
 | Dependency: Optional the HELP Data member to be created           |
 |             using the sample data provided (find *custom*)        |
 |                                                                   |
 |             FSHelp (CBT Tape File 134) may be used (see *custom*) |
 |                                                                   |
 |             - July 2017 update:   fixes an issue with )I records  |
 |             - August 2018 update: stops sequence number clearing  |
 |               if data in positions 73-80 (EX MXI)                 |
 |                                                                   |
 | Customizations:  Find *custom* below for site customizations      |
 |                                                                   |
 | Author:     John P. Kalinich and Lionel B. Dyck                   |
 |             The ISPF Cabal - Vive la rÃ©volution                   |
 |                                                                   |
 | History:                                                          |
 |             07/29/21 - V3.13                                      |
 |                      - Add HISTORY command (JK)                   |
 |             07/28/21 - V3.12                                      |
 |                      - Add REXX command to the help entries (JK)  |
 |             10/20/20 - V3.11                                      |
 |                      - Add JULIAN command to the help entries     |
 |             05/23/20 - V3.10                                      |
 |                      - Correct )X Syntax display                  |
 |             02/11/20 - V3.9                                       |
 |                      - Add more help entries                      |
 |             12/20/19 - V3.8                                       |
 |                      - Highlight key sections                     |
 |             04/01/19 - V3.7                                       |
 |                      - Ignore ALL records before the )F statement |
 |             11/07/18 - V3.6                                       |
 |                      - Fix comments before >Start                 |
 |             07/24/18 - V3.5                                       |
 |                      - Add additional SHA members from CBT file   |
 |                        900                                        |
 |             02/28/18 - V3.4                                       |
 |                      - Change tbend to tbclose                    |
 |             10/30/17 - V3.3                                       |
 |                      - Change Include Help record to Noteline     |
 |                      - Add /t switch                              |
 |                      - Add BookMangler SHELF command              |
 |                      - Add Xclude line command                    |
 |             10/27/17 - V3.2                                       |
 |                      - Correction to eliminate blank lines after  |
 |                        )) records                                 |
 |             10/19/17 - V3.1                                       |
 |                      - Correction to handle some help members     |
 |                        with nested includes                       |
 |             10/18/17 - V3.0                                       |
 |                      - Relocate messages to the end of the view   |
 |                      - Remove non-display characters that may be  |
 |                        within a Help member                       |
 |             09/14/17 - V2.9                                       |
 |                      - Added CADisk Help Commands                 |
 |                      - Allow the help list to be more free form   |
 |             08/28/17 - V2.8                                       |
 |                      - Correction if a )I is last record          |
 |                      - Remove help comments (* in col 2)          |
 |             08/24/17 - V2.7                                       |
 |                      - Support )F Function - text                 |
 |             08/18/17 - V2.6                                       |
 |                      - Add Script command (DCF)                   |
 |             08/14/17 - V2.5                                       |
 |                      - Fix typos in panels                        |
 |                      - Add MXI help                               |
 |             08/03/17 - V2.4                                       |
 |                      - Add more RACF Help (thx JK)                |
 |             07/28/17 - V2.3                                       |
 |                      - Correct the sequence number blank code     |
 |             07/26/17 - V2.2                                       |
 |                      - Added several additional help members      |
 |                      - Add LOCAL group of help entries            |
 |             07/20/17 - V2.1                                       |
 |                      - Minor Panel header changes for clarity     |
 |             07/20/17 - V2.0                                       |
 |                      - Several enhancements and expanded tutorial |
 |                      - Make the description field scrollable      |
 |             07/19/17 - V1.9                                       |
 |                      - Change tbdispl panel info                  |
 |                      - Colorize sorted column                     |
 |                      - Optional Reset of Tab to Point and Shoot   |
 |                        - find *custom* to change default          |
 |             07/18/17 - V1.8                                       |
 |                      - Additional point/shoot on table panel      |
 |             07/18/17 - V1.7                                       |
 |                      - Eliminate duplication due to code chagnes  |
 |             07/17/17 - V1.6                                       |
 |                      - Correction to handle missing includes )I   |
 |             07/17/17 - V1.5                                       |
 |                      - Correction to handle )INFORMATION in IPCS  |
 |                      - Change the table display panel:            |
 |                        - Remove selection option info             |
 |                        - Make column headers point/shoot          |
 |             07/14/17 - V1.4                                       |
 |                      - Use customized view panel with a custom    |
 |                        title to eliminate the temp dsname         |
 |             07/13/17 - V1.3                                       |
 |                      - Use temp pds to free up syshelp            |
 |                      - Add to the help data:                      |
 |                            BPXBATCH BPXMTEXT BPXTRACE ISH         |
 |                            MKNOD OBROWSE OSTEPLIB ZLSOF           |
 |                            RMM*                                   |
 |             07/12/17 - V1.2                                       |
 |                      - Clean up format by deleting all records    |
 |                        prior to the 1st ) record                  |
 |             07/11/17 - V1.1                                       |
 |                      - Set Caps Off for better readability        |
 |             07/11/17 - V1.0                                       |
 |                      - General availability                       |
 |             06/30/17 - Numerous changes (including name)          |
 |             06/22/17 - Creation                                   |
 * ----------------------------------------------------------------- |
 | Notes:  1. Additions to the list of TSO Help members is easy by   |
 |            just adding them to the table at the end of this       |
 |            code.                                                  |
 |         2. Use the /W switch when calling to see which TSO        |
 |            Help members in the list don't exist in your           |
 |            SYSHELP concatenation.                                 |
 |         3. FSHELP is a full screen TSO command processor          |
 |             - Not an ISPF application                             |
 |         4. If ISPF Settings have Tab to Point and Shoot enabled   |
 |            then the user can tab to the PNS fields and press      |
 |            Enter (or double click) to activate                    |
 | ----------------------------------------------------------------- |
 | Copyleft (c) All Wrongs Reserved                                  |
 * ----------------------------------------------------------------- */

 arg helpcmd

/* ----------------------------------------------- *
 | Check for APPLID of ISR and if not then recurse |
 * ----------------------------------------------- */
 Address ISPExec
 "Vget (Zapplid)"
 "Control Errors Return"
 if zapplid <> "ISR" then do
     "Select CMD(%"sysvar('sysicmd') helpcmd ") Newappl(ISR)" ,
         "Passlib"
    exit 0
    end

/* --------------------- *
 | Check for Warn switch |
 * --------------------- */
 if pos('/W',helpcmd) > 0 then do
    wp = pos('/W',helpcmd)
    helpcmd = strip(substr(helpcmd,1,wp-1))
    warn = 1
    end

/* --------------------- *
 | Check for test switch |
 * --------------------- */
 if pos('/T',helpcmd) > 0 then do
    wp = pos('/T',helpcmd)
    helpcmd = strip(substr(helpcmd,1,wp-1))
    ztsotest = 1
    end
 else ztsotest = 0
 Address ISPExec 'vput (ztsotest)'

/* --------------- *
 | define defaults |
 * --------------- */
  parse value '' with null load_info sortcol srchtsoh

/* ---------------------- *CUSTOM* -------------------------- *
 | The TSO Help member data may be inline or may be in        |
 | an external dataset.                                       |
 |                                                            |
 | If the helpds = * then it will be assumed to be            |
 | inline at the end of all the rexx records starting         |
 | with the >DATA record                                      |
 |                                                            |
 | If helpds is not * then it is assumed to be a              |
 | dataset.                                                   |
 |                                                            |
 | The format for this file is:                               |
 | ----+----1----+----2----+----3----+----4----+----5----+----|
 | COMPONENT: <--- Once per group (TSO:, RACF:, et al)        |
 | COMMAND    Description                                     |
 | . . .      . . .                                           |
 | LOCAL:                                                     |
 | JCL        JCL Standards for the installation              |
 | . . .      . . .                                           |
 | FREE:                                                      |
 | PDS        Swiss Army Knife of Utilities                   |
 | ABEND      TSO help member for abend codes                 |
 | . . .      . . .                                           |
 | TSO:                                                       |
 | ACCOUNT    Modify/add/delete user attributes in UADS       |
 | ALLOCATE   Allocate a data set with or without DCB parms   |
 | . . .      . . .                                           |
 * ---------------------------------------------------------- */
  /* Comment Start
  helpds = "'hlq.local.HELP(ZTSOTOC)'"
     Comment End */
  helpds = '*'

/* --------------------------------------------------- *
 | *custom*                                            |
 |                                                     |
 | Colorize the table columns                          |
 |                                                     |
 | clrs - color of sorted column                       |
 | clrn - color of non-sorted column                   |
 |                                                     |
 | Colors may be Blue, Turq, White, Green, Red, Yellow |
 * --------------------------------------------------- */
 clrn = 'blue'
 clrs = 'turq'

/* ----------------------------------------------- *
 | *custom*  FSHELP or View                        |
 |                                                 |
 | SEt Toggles between ISPF View and FSHELP        |
 |                                                 |
 | 0 = ISPF View                                   |
 | 1 = FSHELP                                      |
 * ----------------------------------------------- */
 'vget (fshelp) profile'
 if datatype(fshelp) /= 'NUM' then
    fshelp = 0

/* ---------------------------------------------------- *
 |                         *Custom*                     |
 |                                                      |
 | Set notify to 0 to disable notifications for missing |
 |                 help members                         |
 |            to 1 to enable notifications for missing  |
 |                 help members                         |
 * ---------------------------------------------------- */
 notify = 1
 if warn = 1 then notify = 1

/* ---------------------------------------------------------- *
 | *custom*                                                   |
 |                                                            |
 | If zpns is 0 then the tab to point and shoot will NOT      |
 |    be turned off while the table is displayed              |
 | If zpns is 1 then the tab to point and shoot WILL BE       |
 |    turned off while the table is displayed                 |
 |                                                            |
 | NOTE: When the tab to point and shoot is turned off that   |
 |       it is turned off globally within ISPF.               |
 |                                                            |
 | WARNING: If ISPF (or TSO) crashes while the user in in     |
 |          table display with the tab turned off then that   |
 |          will be the default for the user until they       |
 |          manually reset it in the ISPF option 0 (SETTINGS) |
 |          dialog.                                           |
 * ---------------------------------------------------------- */
 zpns = 1    /* If tab to point and shoot is yes then turn off
                when the table display is active */
 zpns = 0    /* leave tab to point and shoot setting alone */

/* ------------------------- *
 | Read in the ZTSOHELP data |
 * ------------------------- */
  if helpds /= '*' then do
    Address TSO
    'Alloc f('helptab') shr reuse ds('helpds')'
    'Execio * diskr' helptab '(finis stem help.'
    'free f('helptab')'
    end
  else do
       lastrec = sourceline()
       hc = 0
       drop help.
       do i = 1 to lastrec
          line = sourceline(i)
          if translate(left(line,5)) = '>DATA' then leave
          end
       do ir = i to lastrec
          line = sourceline(ir)
          if pos('/*',line) > 0 then iterate
          if pos('*/',line) > 0 then iterate
          if pos('>DATA',line) > 0 then iterate
          if pos('>END',line) > 0 then leave
          hc = hc + 1
          help.hc = line
          end
          help.0 = hc
       end

/* ----------------------------------------- *
 | Build and Display the table of Help pages |
 * ----------------------------------------- */
  Address ISPExec
  'vget (ztps)'
  load_info = loadispf()
  call build_list
  ztdsels = 0
  src = 0
  rowcrp = 0
  crp = 1
  table_panel = 'zTSOHELP'
  do forever
    parse value null with zcmd zsel zerrsm zerrlm
    if helpcmd /= null then do
       tsocmd = helpcmd
       call do_it
       leave
       end
    if fshelp = 0 then viewfs = '(View)'
                  else viewfs = '(FSHelp)'
    if ztdsels > 0 then src = 4
    if zpns = 1 then
    if ztps = 'Y' then do
       ztpso = 'Y'
       /* ----------------------- *
        | Turn off TAB-PAS option |
        * ----------------------- */
        "select pgm(ispopt) parm(pstab(OFF))"
       end
    if src = 4 then "TBDispl" ztsohtbl
    else do
      "TBTOP" ztsohtbl
      "TBSKIP" ztsohtbl "NUMBER("crp")"
      if rowcrp = 0
      then "TBDISPL" ztsohtbl "PANEL("table_panel")"
      else "TBDISPL" ztsohtbl "PANEL("table_panel")",
        "CSRROW("rowcrp") AUTOSEL(NO)"
    end
    src = rc
    crp = ztdtop
    if zpns = 1 then
    if ztps = 'Y' then
       if ztpso = 'Y' then do
       /* ----------------------- *
        | Turn on  TAB-PAS option |
        * ----------------------- */
        "select pgm(ispopt) parm(pstab(ON))"
        end
    if src > 4 then do
       'tbclose' ztsohtbl
       leave
       end

    if datatype(row) /= 'NUM' then row = 0
    if zsel = 'X' then do
      ssel = zsel
      "TBDELETE" ztsohtbl
      zsel = ssel
      end
    if row /= 0 then do
      ssel = zsel
      "TBTOP" ztsohtbl
      "TBSKIP" ztsohtbl "NUMBER("row")"
      zsel = ssel
      end
    if zcmd /= null then do
      Select
        When zcmd = 'RL' then do
             if srchtsoh = null then do
                smsg = 'Invalid'
                lmsg = 'Repeat Locate (RL) must follow' ,
                       'a Locate command.'
                'setmsg msg(ztso001)'
                end
             else call do_locate srchtsoh 'Next'
             end
        When abbrev("HISTORY",translate(word(zcmd,1)),1) = 1 then do
          zcmd = ''
          call do_history
          end
        When abbrev('S',translate(word(zcmd,1)),1) = 1 then do
             parse value zcmd with x tsocmd
             if tsocmd = null then do
                smsg = 'Unknown'
                lmsg = 'Select requires a TSO Help member name.'
                'Setmsg msg(ztso001)'
                end
             else do
                  tsocomp = ''
                  call do_it
                  end
             end
        When abbrev('LOCATE',translate(word(zcmd,1)),1) = 1 |,
          abbrev('FIND',translate(word(zcmd,1)),1) = 1 then
          call do_locate subword(zcmd,2)
        When abbrev('ONLY',translate(word(zcmd,1)),1) = 1 |,
          abbrev('ALL',translate(word(zcmd,1)),3) = 1 then do
          parse value zcmd with x string
          string = translate(string)
          'tbtop' ztsohtbl
          do forever
            'tbskip' ztsohtbl
            if rc > 0 then leave
            if pos(string,translate(tsocmd tsocomp tsodesc)) = 0
            then 'tbdelete' ztsohtbl
          end
          'tbtop' ztsohtbl
        end
        When abbrev('REFRESH',translate(word(zcmd,1)),1) = 1 then do
          'tbclose' ztsohtbl
          call build_list
          smsg = 'Refreshed'
          lmsg = 'Refresh completed and all TSO Help entries are' ,
                 'now displayed.'
          Address ISPExec 'Setmsg msg(ztso001)'
        end
        When abbrev('SET',translate(word(zcmd,1)),2) = 1 then do
          if fshelp = 0 then do
             fshelp = 1
             fshelps = 'On'
             'vput (fshelp) profile'
             end
          else do
               fshelp = 0
               fshelps = 'Off'
               'vput (fshelp) profile'
               end
          smsg = 'Set FSHELP' fshelps
          lmsg = 'Set of FSHELP to' fshelps
          Address ISPExec 'Setmsg msg(ztso001)'
        end
        When abbrev('SORT',translate(word(zcmd,1)),2) = 1 then do
          parse value zcmd with x cmd order
          cmds = null
          select
            when abbrev('COMMAND',cmd,4) = 1 then do
                 cmds = 'tsocmd'
                 pclrn = clrs
                 pclrc = clrn
                 pclrd = clrn
                 end
            when abbrev('COMPONENT',cmd,4) = 1 then do
                 cmds = 'tsocomp'
                 cmdc = 'tsocmd'
                 pclrn = clrn
                 pclrc = clrs
                 pclrd = clrn
                 end
            when abbrev('DESCRIPTION',cmd,2) = 1 then do
                 cmds = 'tsodesc'
                 cmdc = 'tsocmd'
                 pclrn = clrn
                 pclrc = clrn
                 pclrd = clrs
                 end
            otherwise do
                      smsg = 'Unknown'
                      lmsg = cmd 'is not a valid sort field. Use one' ,
                             'of the column headers.'
                      'setmsg msg(ztso001)'
                      end
          end
          if order = null then order = 'A'
          if pos(order,'AD') = 0 then order = 'A'
          'vput (pclrn pclrc pclrd)'
          if cmds /= null then
          if cmds = 'tsocomp'
             then 'tbsort' ztsohtbl 'fields('cmds',c,'order',tsocmd,c,a)'
             else 'tbsort' ztsohtbl 'fields('cmds',c,'order')'
          sortcol = cmds
          'tbtop' ztsohtbl
          crp = 1
        end
        Otherwise do
          smsg = 'Unknown'
          lmsg = word(zcmd,1) 'is an unknown command.'
          'Setmsg msg(ztso001)'
        end
      end
    end
    if (zsel /= null) & (zsel /= 'X') then
    call do_it
  end

/* -------------------------- *
 | Done so clean up and leave |
 * -------------------------- */
  Address ISPEXEC
  do until length(load_info) = 0
    parse value load_info with dd libd load_info
    if left(libd,6) = "ALTLIB" then do
      if libd = "ALTLIBC"
      then lib = "CLIST"
      else lib = "EXEC"
      Address TSO,
        "Altlib Deact Application("lib")"
    end
    else "libdef" libd
    Address TSO "free f("dd")"
  end

 /* ----- *
  * Close *
  * ----- */
  "LMFree  Dataid("status")"
  exit

/* -------------- *
 | Locate Routine |
 * -------------- */
Do_Locate:
  arg srchtsoh next
  if srchtsoh = null then do
    smsg = 'Invalid'
    lmsg = 'No TSO Help command provided'
    'Setmsg msg(ztso001)'
  end
  else do
    if next = null
       then 'tbtop' ztsohtbl
    else do
      'tbtop' ztsohtbl
      'tbskip' ztsohtbl 'Number('crp')'
       end
    rlhit = 0
    'tbvclear' ztsohtbl
    tsocmd = srchtsoh'*'
    if next /= null then next = 'NEXT'
    'tbsarg' ztsohtbl 'namecond(tsocmd,EQ)' next
    newcrp = 0
    'tbscan' ztsohtbl 'position(newcrp)'
    if rc > 0 then do
       if rlhit = 0 then do
          rlhit = 1
          'tbtop' ztsohtbl
          'tbvclear' ztsohtbl
          tsocmd = srchtsoh'*'
         'tbsarg' ztsohtbl 'namecond(tsocmd,EQ)'
          newcrp = 0
          'tbscan' ztsohtbl 'position(newcrp)'
          if rc = 0 then do
             crp = newcrp
             smsg = 'Wrapped'
             lmsg = srchtsoh 'found after wrapping the table.'
             'setmsg msg(ztso001)'
             end
          else do
               smsg = 'Not found'
               lmsg = srchtsoh 'not found.'
               'setmsg msg(ztso001)'
               end
          end
       else do
             smsg = 'Not found'
             lmsg = srchtsoh 'not found.'
             'setmsg msg(ztso001)'
             end
       end
    else do
         crp = newcrp
         smsg = 'Found'
         lmsg = srchtsoh 'found in row' crp
         'setmsg msg(ztso001)'
         end
    end
  Return

/* ---------------------------------------- *
 | Build the list of available Help pages   |
 * ---------------------------------------- */
build_list:
  Address ISPEXEC
  "LMInit Dataid(status) DDname(SYSHELP) ENQ(SHR)"
  ztsostat = status
  'Vput (ztsostat)'
  "LMOpen Dataid("status") Option(INPUT)"
  ztsohtbl = 'man'random(999)
  'tbcreate' ztsohtbl 'keys(tsocmd) names(tsocomp tsodesc)' ,
    'replace share nowrite'
  nohelp = null
  nofind = 0
  do i = 1 to help.0
    parse value help.i with tsocmd tsodesc
    tsocmd = strip(tsocmd)
    tsodesc = strip(tsodesc)
    if pos(':',tsocmd) > 0 then do
      colonm1 = pos(':',tsocmd) - 1
      tsocomp = substr(tsocmd,1,colonm1)
      iterate
    end
    if tsocomp = 'SHELF' then do
      'tbadd' ztsohtbl 'order'
      iterate
      end
    'LMMFind Dataid('status') member('tsocmd')'
    if rc <> 0 then do
      nohelp = nohelp||left(tsocmd,9)
      nofind = nofind + 1
      iterate
    end
    'tbadd' ztsohtbl 'order'
  end
  if (nohelp <> null) & (helpcmd = null) & (notify = 1) then do
    smsg = nofind 'Members not found'
    lmsg = nohelp
    'Setmsg msg(ztso001)'
  end
  Address ISPExec
  'tbtop' ztsohtbl
  'tbsort' ztsohtbl 'fields(tsocmd,c,a)'
  sortcol = 'tsocmd'
  pclrn = clrs
  pclrc = clrn
  pclrd = clrn
  'vput (pclrn pclrc pclrd)'
  "LMClose Dataid("status")"
  return

/* ------------------------ *
 | Now display the Help page |
 * ------------------------ */
Do_It:
  if tsocomp = 'SHELF' then do
    Address TSO
    "%bookmgr shelf('eoybook."tsocmd".bkshelf')"
    return
    end
  Address ISPExec
  'Control Display Save'
  if fshelp = 0
     then do
          "LMOpen Dataid("status") Option(INPUT)"
          ztsostat = status
          'Vput (ztsostat)'
          'LMMFind Dataid('status') member('tsocmd')'
          if rc <> 0 then do
             smsg = 'Not found'
             lmsg = 'TSO Help member 'tsocmd' not found.'
             'Setmsg msg(ztso001)'
             end
          else call view_it
          end
     else 'Select CMD(fshelp 'tsocmd')'
  'Control Display Restore'
  return

View_it:
 thdd = 'zt'random(9999)
 Address TSO ,
 'Alloc f('thdd') new spa(5,5) tr dir(2) unit(sysda)' ,
       'recfm(f b) lrecl(80) blksize(0)'

 'lminit dataid(thd) ddname('thdd')'
 'lmcopy fromid('status') todataid('thd') frommem('tsocmd')'
 ztsohtit = 'TSO Help:' tsocmd
 'vput (ztsohtit)'
 'view dataid('thd') member('tsocmd') macro('ztsohm')' ,
    'panel(ztsohed) ChgWarn(no)'
 'lmfree dataid('thd')'
 Address TSO 'Free f('thdd')'
 "LMInit Dataid(status) DDname(SYSHELP) ENQ(SHR)"
 Return

  /* --------------------------------- *
  | History routine                   |
  * --------------------------------- */
do_history:
  hist. = ''
  hist.1 = 'ZTSOHELP Change History'
  hist.2 = ' '
  line = 1
  x = sourceline(line)
  do until pos(' | History:',x) > 0
    line = line + 1
    x = sourceline(line)
    iterate
  end
  tail = 3
  do until pos(' * ----',x) > 0
    parse value x with '|' hist.tail '|'
    line = line + 1
    tail = tail + 1
    x = sourceline(line)
  end
  hist.0 = tail - 1
  call do_view_stem hist
  drop hist.
  return

  /* --------------------------------- *
  | ISPF View Stem routine            |
  * --------------------------------- */
do_view_stem:
  parse arg stem
  Address TSO
  'alloc f('dd') unit(vio) new reuse space(1,1) tracks',
    'lrecl(80) recfm(f b) blksize(0) dsorg(ps)'
  'execio * diskw' dd '(finis stem' stem'.'

  Address ISPExec
  'lminit dataid(id) ddname('dd') enq(exclu)'
  if rc /= 0 then do
    zedsmsg = 'Error'
    zedlmsg = 'Error.  LMINIT failed for VIO output file'
    'setmsg msg(isrz001)'
    exit
  end
  'view   dataid('id')'
  'lmfree dataid('id')'
  Address TSO 'free f('dd')'
  return

/* --------------------  rexx procedure  -------------------- *
 * Name:      LoadISPF                                        *
 *                                                            *
 * Function:  Load ISPF elements that are inline in the       *
 *            REXX source code.                               *
 *                                                            *
 * Syntax:    rc = loadispf()                                 *
 *                                                            *
 *            The inline ISPF resources are limited to        *
 *            ISPF Messages, Panels, and Skeletons,           *
 *                 CLISTs and EXECs are also supported.       *
 *                                                            *
 *            The inline resources must start in column 1     *
 *            and use the following syntax:                   *
 *                                                            *
 *            >START    used to indicate the start of the     *
 *                      inline data                           *
 *                                                            *
 *            >END    - used to indicate the end of the       *
 *                      inline data                           *
 *                                                            *
 *            Each resource begins with a type record:        *
 *            >type name                                      *
 *               where type is CLIST, EXEC, MSG, PANEL, SKEL  *
 *                     name is the name of the element        *
 *                                                            *
 * Sample usage:                                              *
 *          -* rexx *-                                        *
 *          load_info = loadispf()                            *
 *          ... magic code happens here (your code) ...       *
 *          Address ISPEXEC                                   *
 *          do until length(load_info) = 0                    *
 *             parse value load_info with dd libd load_info   *
 *             if left(libd,6) = "ALTLIB" then do             *
 *                if libd = "ALTLIBC" then lib = "CLIST"      *
 *                                    else lib = "EXEC"       *
 *                Address TSO,                                *
 *                  "Altlib Deact Application("lib")"         *
 *                end                                         *
 *             else "libdef" libd                             *
 *             address tso "free f("dd")"                     *
 *             end                                            *
 *          exit                                              *
 *          >Start inline elements                            *
 *          >Panel panel1                                     *
 *          ...                                               *
 *          >Msg msg1                                         *
 *          ...                                               *
 *          >End of inline elements                           *
 *                                                            *
 * Returns:   the list of ddnames allocated for use along     *
 *            with the libdef's performed or altlib           *
 *                                                            *
 *            format is ddname libdef ddname libdef ...       *
 *                   libdef may be altlibc or altlibe         *
 *                   for altlib clist or altlib exec          *
 *                                                            *
 * Notes:     Entire routine must be included with REXX       *
 *            exec - inline with the code.                    *
 *                                                            *
 * Comments:  The entire rexx program is processed from the   *
 *            last record to the first to find the >START     *
 *            record at which point all records from that     *
 *            point on are processed until the >END           *
 *            statement or the end of the program is found.   *
 *                                                            *
 *            It is *strongly* suggested that the inline      *
 *            elements be at the very end of your code so     *
 *            that the search for them is faster.             *
 *                                                            *
 *            Inline ISPTLIB or ISPLLIB were not supported    *
 *            because the values for these would have to be   *
 *            in hex.                                         *
 *                                                            *
 * Author:    Lionel B. Dyck                                  *
 *                                                            *
 * History:                                                   *
 *            07/03/17 - Add code for inline help data        *
 *            05/10/16 - correction for clist and exec        *
 *            04/19/16 - bug correction                       *
 *            06/04/04 - Enhancements for speed               *
 *            08/05/02 - Creation                             *
 *                                                            *
 * ---------------------------------------------------------- *
 * Disclaimer: There is no warranty, either explicit or       *
 * implied with this code. Use it at your own risk as there   *
 * is no recourse from either the author or his employer.     *
 * ---------------------------------------------------------- */
 LoadISPF: Procedure expose help. helpds

 parse value "" with null kmsg kpanel kskel first returns ,
                     kclist kexec kdata
/* ------------------------------------------------------- *
 * Find the InLine ISPF Elements and load them into a stem *
 * variable.                                               *
 *                                                         *
 * Elements keyword syntax:                                *
 * >START - start of inline data                           *
 * >CLIST name                                             *
 * >EXEC name                                              *
 * >MSG name                                               *
 * >PANEL name                                             *
 * >SKEL name                                              *
 * >END   - end of all inline data (optional if last)      *
 * ------------------------------------------------------- */
 last_line = sourceline()
 do i = last_line to 1 by -1
    line = sourceline(i)
    if translate(left(line,6)) = ">START " then leave
    end
 rec = 0
/* --------------------------------------------------- *
 * Flag types of ISPF resources by testing each record *
 * then add each record to the data. stem variable.    *
 * --------------------------------------------------- */
 do j = i+1 to last_line
    line = sourceline(j)
    if translate(left(line,5)) = ">END "   then leave
    if translate(left(line,7)) = ">CLIST " then kclist = 1
    if translate(left(line,6)) = ">EXEC "  then kexec  = 1
    if translate(left(line,5)) = ">MSG "   then kmsg   = 1
    if translate(left(line,7)) = ">PANEL " then kpanel = 1
    if translate(left(line,6)) = ">SKEL "  then kskel  = 1
    rec  = rec + 1
    data.rec = line
    end

/* ----------------------------------------------------- *
 * Now create the Library and Load the Member(s)         *
 * ----------------------------------------------------- */
 Address ISPExec
/* ----------------------------- *
 * Assign dynamic random ddnames *
 * ----------------------------- */
 clistdd = "lc"random(999)
 execdd  = "le"random(999)
 msgdd   = "lm"random(999)
 paneldd = "lp"random(999)
 skeldd  = "ls"random(999)

/* ---------------------------------------- *
 *  LmInit and LmOpen each resource library *
 * ---------------------------------------- */
 if kclist <> null then do
    call alloc_dd clistdd
    "Lminit dataid(clist) ddname("clistdd")"
    "LmOpen dataid("clist") Option(Output)"
    returns = strip(returns clistdd 'ALTLIBC')
    end
 if kexec <> null then do
    call alloc_dd execdd
    "Lminit dataid(exec) ddname("execdd")"
    "LmOpen dataid("exec") Option(Output)"
    returns = strip(returns execdd 'ALTLIBE')
    end
 if kmsg <> null then do
    call alloc_dd msgdd
    "Lminit dataid(msg) ddname("msgdd")"
    "LmOpen dataid("msg") Option(Output)"
    returns = strip(returns msgdd 'ISPMLIB')
    end
 if kpanel <> null then do
    call alloc_dd paneldd
    "Lminit dataid(panel) ddname("paneldd")"
    "LmOpen dataid("panel") Option(Output)"
    returns = strip(returns paneldd 'ISPPLIB')
    end
 if kskel <> null then do
    call alloc_dd skeldd
    "Lminit dataid(skel) ddname("skeldd")"
    "LmOpen dataid("skel") Option(Output)"
    returns = strip(returns skeldd 'ISPSLIB')
    end

/* ----------------------------------------------- *
 * Process all records in the data. stem variable. *
 * ----------------------------------------------- */
 do i = 1 to rec
    record = data.i
    recordu = translate(record)
    if left(recordu,5) = ">END " then leave
    if left(recordu,7) = ">CLIST " then do
       if first = 1 then call add_it
       type = "Clist"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">EXEC " then do
       if first = 1 then call add_it
       type = "Exec"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,5) = ">MSG " then do
       if first = 1 then call add_it
       type = "Msg"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,7) = ">PANEL " then do
       if first = 1 then call add_it
       type = "Panel"
       first = 1
       parse value record with x name
       iterate
       end
    if left(recordu,6) = ">SKEL " then do
       if first = 1 then call add_it
       type = "Skel"
       first = 1
       parse value record with x name
       iterate
       end

   /* --------------------------------------------*
    * Put the record into the appropriate library *
    * based on the record type.                   *
    * ------------------------------------------- */
    Select
      When type = "Clist" then
           "LmPut dataid("clist") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Exec" then
           "LmPut dataid("exec") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(255)"
      When type = "Msg" then
           "LmPut dataid("msg") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      When type = "Panel" then do
           phit = 0
           if left(record,2) = '/*' then phit = 1
           if left(record,2) = '*/' then phit = 1
           if phit = 0 then
           "LmPut dataid("panel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
           end
      When type = "Skel" then
           "LmPut dataid("skel") MODE(INVAR)" ,
                 "DataLoc(record) DataLen(80)"
      Otherwise nop
      end
    end

 if type <> null then call add_it
/* ---------------------------------------------------- *
 * Processing completed - now lmfree the allocation and *
 * Libdef the library.                                  *
 * ---------------------------------------------------- */
 if kclist <> null then do
    Address TSO,
    "Altlib Act Application(Clist) File("clistdd")"
    "LmFree dataid("clist")"
    end
 if kexec <> null then do
    Address TSO,
    "Altlib Act Application(Exec) File("execdd")"
    "LmFree dataid("exec")"
    end
 if kmsg <> null then do
    "LmFree dataid("msg")"
    "Libdef ISPMlib Library ID("msgdd") Stack"
    end
 if kpanel <> null then do
    "Libdef ISPPlib Library ID("paneldd") Stack"
    "LmFree dataid("panel")"
    end
 if kskel <> null then do
    "Libdef ISPSlib Library ID("skeldd") Stack"
    "LmFree dataid("skel")"
    end
 return returns

/* --------------------------- *
 * Add the Member using LmmAdd *
 * based upon type of resource *
 * --------------------------- */
 Add_It:
 Select
    When type = "Clist" then
         "LmmAdd dataid("clist") Member("name")"
    When type = "Exec" then
         "LmmAdd dataid("exec") Member("name")"
    When type = "Msg" then
         "LmmAdd dataid("msg") Member("name")"
    When type = "Panel" then
         "LmmAdd dataid("panel") Member("name")"
    When type = "Skel" then
         "LmmAdd dataid("skel") Member("name")"
    Otherwise nop
    end
 type = null
 return

/* ------------------------------ *
 * ALlocate the temp ispf library *
 * ------------------------------ */
 Alloc_DD:
 arg dd
 Address TSO
 if pos(left(dd,2),"lc le") > 0 then
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(v b) lrecl(255) blksize(32760)"
 else
 "Alloc f("dd") unit(sysda) spa(5,5) dir(1)",
    "recfm(f b) lrecl(80) blksize(23440)"
 return
/*
>START
>Panel zTSOHELP
)Attr Default(%+_)
   ! type( input) intens(high) caps(on ) just(left ) pad('_')
   ^ type(output) intens(low ) caps(off) just(asis ) pad(' ')
   01 type(output) intens(high) skip(on) color(&pclrn)
   02 type(output) intens(high) skip(on) color(&pclrc)
   03 type(output) intens(high) skip(on) color(&pclrd)
   ? type(output) intens(low ) caps(off) just(asis ) color(white)
   ~ type(text) intens(high) color(turq)
   $ type(text) intens(high)
   % type(text) intens(high) skip(on)
   + type(text) intens(low) skip(on)
   # type(output) intens(high) caps(off) just(left)
     pas(on) skip(on) hilite(uscore)
   04 type(output) intens(high) caps(off) just(left)
     pas(on) skip(on) hilite(uscore) color(&pclrn)
   05 type(output) intens(high) caps(off) just(left)
     pas(on) skip(on) hilite(uscore) color(&pclrc)
   06 type(output) intens(high) caps(off) just(left)
     pas(on) skip(on) hilite(uscore) color(&pclrd)
)Body  Expand(\\) Width(&zscreenw)
~zTSOHELPÂ®?ver $           TSO Help Pages?viewfs  +
%Command ===>_zcmd                                 \ \%Scroll ===>_amt +
%
+Command: %L cmd+-Locate #RL+- Repeat Locate %Only string +- Only #R+- Refresh
+         %S cmd+-Select #SE+- Set Viewer    %SOrt col A/D+- Sort #H+- History
+
%   +Ât1     + 	t2       +Ât3         +
)Model
!z+  z          z       z
)Init
  .ZVARS = '(zsel tsocmd tsocomp tsodesc)'
  if (&amt = &z)
      &amt = csr
 .cursor = zcmd
 .help = #ztsoh1
 &Refresh = 'Refresh'
 &RL      = 'RL'
 &R       = 'R'
 &SE      = 'SE'
 &H       = 'H'
 &t1      = 'Command'
 &t2      = 'Component'
 &T3      = 'Description'
 vget (pclrn pclrc pclrd)
)Proc
if (&zsel = _)
    &zsel = &z
ver (&zsel,list,S,'=',X)
if (&ztdsels = 0000)
   &row = .csrrow
   if (&row ^= 0)
       if (&zsel = &z)
           &zsel = 'S'
if (&ztdsels ^= 0000)
    &row = 0
if (&zsel ^= &z)
   if (&zsel = '=')
       &zsel = &osel
&osel = &zsel
if (&zcmd = 'name')
   if (&named = '')
      &zcmd = 'SORT COMM D'
      &named = 'd'
   else
      &zcmd = 'SORT COMM A'
      &named = ''
if (&zcmd = 'comp')
   if (&compd = '')
      &zcmd = 'SORT COMP A'
      &compd = 'a'
   else
      &zcmd = 'SORT COMP D'
      &compd = ''
if (&zcmd = 'desc')
   if (&descd = '')
      &zcmd = 'SORT DESC A'
      &descd = 'a'
   else
      &zcmd = 'SORT DESC D'
      &descd = ''
)Field
Field(tsodesc) len(80) scroll(zscrl)
)pnts
field(t1) var(zcmd) val(name)
field(t2) var(zcmd) val(comp)
field(t3) var(zcmd) val(desc)
field(r)  var(zcmd) val(Refresh)
field(rl) var(zcmd) val(RL)
field(se) var(zcmd) val(set)
field(h)  var(zcmd) val(history)
*/
)End
>Panel #ztsoh1
)ATTR DEFAULT(%+_)
   %   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
   +   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(TURQ)
   !   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(RED)
   @   TYPE(TEXT)  INTENS(HIGH) SKIP(ON) HILITE(USCORE) COLOR(BLUE)
   _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
%Tutorial+\-\(%TSOHELP+)\-\%Tutorial
%Command ===>_ZCMD
+
+Primary Commands:
  !*%History          +Display change history of zTSOHELP
  %  Locate cmd next  +Locate the requested command in the table
  %  Only string      +Remove all rows without string (ALL is alias)
  !*%Refresh          +Refresh the table after using ONLY
  !*%RL               +Repeat Locate
  %  S cmd            +Select the command
  !*%SEt              +Toggles between using ISPF View and FSHELP
  %  SOrt column order+Sort table using the column name (order=A/D, default=A)
  !*+                  Denotes point-and-shoot commands
+Line Commands:
%    S+               +Select a command to be browsed under View or FSHelp
%    X+               +Exclude a command from the list
%    =+               +Repeat prior line command
+
+Column headers are point-and-shoot sortable.  1st shot = Sort Ascending,
+2nd shot = Sort Descending.
  +
+ \ \ (press%ENTER+to continue) \ \
)PROC
 &zcont = #ztsoh2
)End
>Panel #ztsoh2
)ATTR DEFAULT(%+_)
   %   TYPE(TEXT)  INTENS(HIGH) SKIP(ON)
   +   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(TURQ)
   !   TYPE(TEXT)  INTENS(LOW)  SKIP(ON) COLOR(RED)
   @   TYPE(TEXT)  INTENS(HIGH) SKIP(ON) HILITE(USCORE) COLOR(BLUE)
   _   TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) HILITE(USCORE)
)BODY EXPAND(\\)
%Tutorial+\-\(%TSOHELP+)\-\%Tutorial
%Command ===>_ZCMD
+
%Notes:+To use Tab key to access Point and Shoot fields the
+       Tab to Point and Shoot must be selected in the ISPF
+       Settings (ISPF Option 0).
+
+      +Use%Only+to limit the display to a specific string
+       to more easily find the command you need.
+
+       The description field is scrollable. Use Right and Left
+       keys with the cursor in a description field.
+
+The list was generated by:
+
%"The Project to Document TSO Commands".+
+
   +  William J. Smith, Editor-in-chief
   +  John Kalinich, Copy Editor and Programmer
   +  Lionel B. Dyck, Assistant Editor and Austin Bureau Chief
   +  Tom Conley,@Make ISPF Great Again+Campaign Manager
+
)PROC
 &zup   = #ztsoh1
)END
>Panel ztsohed
/*
)PANEL KEYLIST(ISRSPEC,ISR)
)ATTR DEFAULT(ÂÂ) FORMAT(MIX)            /* ISREDDE2 - ENGLISH - 7.1 */
 15 TYPE(AB)
 2A TYPE(ABSL) GE(ON)
 2B TYPE(PT)
 2F TYPE(FP)
 14 TYPE(NT)
 1B TYPE(NEF) PADC(USER)
 1C TYPE(VOI) PADC(USER)
 26 AREA(DYNAMIC) EXTEND(ON) SCROLL(ON) USERMOD('20')
 01 TYPE(DATAOUT) INTENS(LOW)
 02 TYPE(DATAOUT)
 03 TYPE(DATAOUT) SKIP(ON)
 04 TYPE(DATAIN) INTENS(LOW) CAPS(OFF) FORMAT(&MIXED)
 05 TYPE(DATAIN) CAPS(OFF) FORMAT(&MIXED)
 06 TYPE(DATAIN) INTENS(LOW) CAPS(IN) FORMAT(&MIXED)
 07 TYPE(DATAIN) CAPS(IN) FORMAT(&MIXED)
 08 TYPE(DATAIN) INTENS(LOW) FORMAT(DBCS) OUTLINE(L)
 09 TYPE(DATAIN) INTENS(LOW) FORMAT(EBCDIC) OUTLINE(L)
 0A TYPE(DATAIN) INTENS(LOW) FORMAT(&MIXED) OUTLINE(L)
 0B TYPE(DATAIN) INTENS(LOW) CAPS(IN) COLOR(&ZPLEXCLR) FORMAT(&MIXED)
 0C TYPE(DATAIN) INTENS(LOW) CAPS(OFF) COLOR(&ZPLEXCLR) FORMAT(&MIXED)
 0D TYPE(DATAIN) INTENS(LOW) CAPS(IN) COLOR(BLUE) FORMAT(&MIXED)
 13 TYPE(DATAOUT) SKIP(ON) HILITE(USCORE)
 16 TYPE(DATAIN) INTENS(LOW) CAPS(IN) HILITE(USCORE) FORMAT(&MIXED)
 17 TYPE(DATAIN) CAPS(IN) HILITE(USCORE) FORMAT(&MIXED)
 1D TYPE(DATAIN) INTENS(LOW) CAPS(IN) COLOR(BLUE) HILITE(USCORE)
      FORMAT(&MIXED)
 20 TYPE(DATAIN) INTENS(LOW) CAPS(IN) FORMAT(&MIXED)
 Z  TYPE(CHAR) COLOR(PINK) HILITE(REVERSE)
 R  TYPE(CHAR) COLOR(RED)
 G  TYPE(CHAR) COLOR(GREEN)
 B  TYPE(CHAR) COLOR(BLUE)
 W  TYPE(CHAR) COLOR(WHITE)
 P  TYPE(CHAR) COLOR(PINK)
 Y  TYPE(CHAR) COLOR(YELLOW)
 T  TYPE(CHAR) COLOR(TURQ)
 L  TYPE(CHAR) COLOR(RED)
 U  TYPE(CHAR) HILITE(USCORE)
 K  TYPE(CHAR) COLOR(&ZCK) HILITE(&ZHK)
 O  TYPE(CHAR) COLOR(&ZCO) HILITE(&ZHO)
 Q  TYPE(CHAR) COLOR(&ZCQ) HILITE(&ZHQ)
 C  TYPE(CHAR) COLOR(&ZCC) HILITE(&ZHC)
 V  TYPE(CHAR) COLOR(&ZCV) HILITE(&ZHV)
 D  TYPE(CHAR) COLOR(&ZCD) HILITE(&ZHD)
 F  TYPE(CHAR) COLOR(&ZCF) HILITE(&ZHF)
 S  TYPE(CHAR) COLOR(&ZCS) HILITE(&ZHS)
 Ã  TYPE(NEF) CAPS(ON) PADC(USER)
)ABC DESC('File') MNEM(1)
PDC DESC('Save') UNAVAIL(ZEDF) MNEM(1) ACTION RUN(>SAVE)
PDC DESC('Cancel') MNEM(1) ACTION RUN(CANCEL)
PDC DESC('Exit') MNEM(1) ACTION RUN(END)
)ABCINIT
.ZVARS=EDITFILE
   IF (&ZVMODET = 'VIEW') &zedf = 1
   ELSE                   &zedf = 0
)ABC DESC('Edit') MNEM(1)
PDC DESC('Reset') MNEM(1) ACTION RUN(>RESET)
PDC DESC('Undo') MNEM(1) ACTION RUN(>UNDO)
PDC DESC('Hilite') UNAVAIL(ZEDE) MNEM(1) ACTION RUN(>HI)
PDC DESC('Cut') MNEM(1) ACTION RUN(>CUT)
PDC DESC('Paste') MNEM(1) ACTION RUN(>PASTE)
)ABCINIT
.ZVARS=EDITEDIT
   IF (&ZEDHI ^= 'YES')  &zede = 1
   ELSE &zede = 0
)ABC DESC('Edit_Settings') MNEM(2)
PDC DESC('Edit settings') MNEM(1) ACTION RUN(>EDSET)
)ABCINIT
.ZVARS=PDFCFM
)ABC DESC('Menu') MNEM(1)
PDC DESC('Settings') UNAVAIL(ZPM1) MNEM(1) ACC(CTRL+S)
 ACTION RUN(ISRROUTE) PARM('SET')
PDC DESC('View') UNAVAIL(ZPM2) MNEM(1) ACC(CTRL+V)
 ACTION RUN(ISRROUTE) PARM('BR1')
PDC DESC('Edit') UNAVAIL(ZPM3) MNEM(1) ACC(CTRL+E)
 ACTION RUN(ISRROUTE) PARM('ED1')
PDC DESC('ISPF Command Shell') UNAVAIL(ZPM4) MNEM(6) ACC(CTRL+C)
 ACTION RUN(ISRROUTE) PARM('C1')
PDC DESC('Dialog Test...') UNAVAIL(ZPM5) MNEM(8) ACC(CTRL+T)
 ACTION RUN(ISRROUTE) PARM('DAL')
PDC DESC('Other IBM Products...') UNAVAIL(ZPM6) MNEM(1) ACC(CTRL+O)
 ACTION RUN(ISRROUTE) PARM('OIB')
PDC DESC('SCLM') UNAVAIL(ZPM7) MNEM(3) ACC(CTRL+L)
 ACTION RUN(ISRROUTE) PARM('SCL')
PDC DESC('ISPF Workplace') UNAVAIL(ZPM8) MNEM(6) ACC(CTRL+W)
 ACTION RUN(ISRROUTE) PARM('WRK')
PDC DESC('Status Area...') UNAVAIL(ZPMS) MNEM(8) ACC(CTRL+A)
 ACTION RUN(ISRROUTE) PARM('SAM')
PDC DESC('Exit') MNEM(2) PDSEP(ON) ACC(CTRL+X) ACTION RUN(EXIT)
)ABCINIT
.ZVARS=ISR@OPT
)ABC DESC('Utilities') MNEM(1)
PDC DESC('Library') UNAVAIL(ZUT1) MNEM(1) ACC(ALT+1)
 ACTION RUN(ISRROUTE) PARM('U1')
PDC DESC('Data set') UNAVAIL(ZUT2) MNEM(1) ACC(ALT+2)
 ACTION RUN(ISRROUTE) PARM('U2')
PDC DESC('Move/Copy') UNAVAIL(ZUT3) MNEM(1) ACC(ALT+3)
 ACTION RUN(ISRROUTE) PARM('U3')
PDC DESC('Data Set List') UNAVAIL(ZUT4) MNEM(2) ACC(ALT+4)
 ACTION RUN(ISRROUTE) PARM('U4')
PDC DESC('Reset Statistics') UNAVAIL(ZUT5) MNEM(5) ACC(ALT+5)
 ACTION RUN(ISRROUTE) PARM('U5')
PDC DESC('Hardcopy') UNAVAIL(ZUT6) MNEM(1) ACC(ALT+6)
 ACTION RUN(ISRROUTE) PARM('U6')
PDC DESC('Download...') UNAVAIL(ZUTDT) MNEM(2) ACC(ALT+7)
 ACTION RUN(ISRROUTE) PARM('UDT')
PDC DESC('Outlist') UNAVAIL(ZUT7) MNEM(2) ACC(ALT+8)
 ACTION RUN(ISRROUTE) PARM('U8')
PDC DESC('Commands...') UNAVAIL(ZUT8) MNEM(1) ACC(ALT+9)
 ACTION RUN(ISRROUTE) PARM('U9')
PDC DESC('Reserved') UNAVAIL(ZUT9) MNEM(6) ACTION RUN(ISRROUTE) PARM('U10')
PDC DESC('Format') UNAVAIL(ZUT10) MNEM(1) ACC(ALT+F1)
 ACTION RUN(ISRROUTE) PARM('U11')
PDC DESC('SuperC') UNAVAIL(ZUT11) MNEM(1) PDSEP(ON) ACC(CTRL+F2)
 ACTION RUN(ISRROUTE) PARM('U12')
PDC DESC('SuperCE') UNAVAIL(ZUT12) MNEM(3) ACC(CTRL+F3)
 ACTION RUN(ISRROUTE) PARM('U13')
PDC DESC('Search-For') UNAVAIL(ZUT13) MNEM(2) ACC(CTRL+F4)
 ACTION RUN(ISRROUTE) PARM('U14')
PDC DESC('Search-ForE') UNAVAIL(ZUT14) MNEM(4) ACC(CTRL+F5)
 ACTION RUN(ISRROUTE) PARM('U15')
PDC DESC('Table Utility') UNAVAIL(ZUT15) MNEM(3) ACC(CTRL+F6)
 ACTION RUN(ISRROUTE) PARM('U16')
PDC DESC('Directory List') UNAVAIL(ZUT16) MNEM(2) ACC(CTRL+F7)
 ACTION RUN(ISRROUTE) PARM('U17')
)ABCINIT
.ZVARS=PDFUTIL
     &zut9 = '1'
)ABC DESC('Compilers') MNEM(1)
PDC DESC('Foreground Compilers') MNEM(1) ACTION RUN(ISRROUTE) PARM('FGD')
PDC DESC('Background Compilers') MNEM(1) ACTION RUN(ISRROUTE) PARM('BKG')
PDC DESC('ISPPREP Panel Utility...') MNEM(1) ACTION RUN(ISPPREP)
PDC DESC('DTL Compiler...') MNEM(1) ACTION RUN(ISPDTLC)
)ABCINIT
.ZVARS=ISRLANG
)ABC DESC('Test') MNEM(1)
PDC DESC('Functions...') UNAVAIL(ZPM5) MNEM(1) ACTION RUN(ISRROUTE) PARM('DL1')
PDC DESC('Panels...') UNAVAIL(ZPM5) MNEM(1) ACTION RUN(ISRROUTE) PARM('DL2')
PDC DESC('Variables...') UNAVAIL(ZPM5) MNEM(1) ACTION RUN(ISRROUTE) PARM('DL3')
PDC DESC('Tables...') UNAVAIL(ZPM5) MNEM(1) ACTION RUN(ISRROUTE) PARM('DL4')
PDC DESC('Log') UNAVAIL(ZPM5) MNEM(1) ACTION RUN(ISRROUTE) PARM('DL5')
PDC DESC('Services...') UNAVAIL(ZPM5) MNEM(1) ACTION RUN(ISRROUTE) PARM('DL6')
PDC DESC('Traces...') UNAVAIL(ZPM5) MNEM(2) ACTION RUN(ISRROUTE) PARM('DL7')
PDC DESC('Break Points...') UNAVAIL(ZPM5) MNEM(1)
 ACTION RUN(ISRROUTE) PARM('DL8')
PDC DESC('Dialog Test...') UNAVAIL(ZPM5) MNEM(1)
 ACTION RUN(ISRROUTE) PARM('DAL')
PDC DESC('Dialog Test appl ID...') MNEM(2) ACTION RUN(ISRROUTE) PARM('DAP')
)ABCINIT
.ZVARS=DIATEST
)ABC DESC('Help') MNEM(1)
PDC DESC('General') MNEM(1) ACTION RUN(TUTOR) PARM('ISR2A000')
PDC DESC('Display screen format') MNEM(1) ACTION RUN(TUTOR) PARM('ISR2E000')
PDC DESC('Scrolling data') MNEM(1) ACTION RUN(TUTOR) PARM('ISR2F000')
PDC DESC('Sequence numbering') MNEM(2) ACTION RUN(TUTOR) PARM('ISR2G000')
PDC DESC('Display modes') MNEM(2) ACTION RUN(TUTOR) PARM('ISR2H000')
PDC DESC('Tabbing') MNEM(1) ACTION RUN(TUTOR) PARM('ISR2I000')
PDC DESC('Automatic recovery') MNEM(1) ACTION RUN(TUTOR) PARM('ISR2J000')
PDC DESC('Edit profiles') MNEM(6) ACTION RUN(TUTOR) PARM('ISR2K000')
PDC DESC('Edit line commands') MNEM(6) ACTION RUN(TUTOR) PARM('ISR2L000')
PDC DESC('Edit primary commands') MNEM(7) ACTION RUN(TUTOR) PARM('ISR2M000')
PDC DESC('Labels and line ranges') MNEM(3) ACTION RUN(TUTOR) PARM('ISR2Q000')
PDC DESC('Ending an edit session') MNEM(2) ACTION RUN(TUTOR) PARM('ISR2N000')
PDC DESC('Appendices') MNEM(8) ACTION RUN(TUTOR) PARM('ISR00004')
PDC DESC('Index') MNEM(5) ACTION RUN(TUTOR) PARM('ISR91000')
)ABCINIT
.ZVARS=EDMHELP
)BODY  EXPAND(//) WIDTH(&ZWIDTH)  CMD(ZCMD)
Â
 File
 Edit
 Edit_Settings
 Menu
 Utilities
 Compilers
 Test
 HelpÂ
Â--/-/-------------------------------------------------------------------------
Z         Z/ /                                           ColumnsZ    Z    Â
Command ===>ÂZ/ /                                            Scroll ===>ÃZ   Â
ZDATA,ZSHADOW/ /                                                              
/ /                                                                           
)INIT
.ZVARS = '(ZVMODET ZTITLE ZCL ZCR ZCMD ZSCED)'
&ZHIDEX = 'Y'
IF (&ZVMODET = 'VIEW') .HELP = ISR10000  /* DEFAULT TUTORIAL NAME */
ELSE                   .HELP = ISR20000  /* DEFAULT TUTORIAL NAME */
&zpm3 = 0
VGET (ZSCED) PROFILE        /* Fill Scroll Vars if       */
IF (&ZSCED = ' ') &ZSCED = 'PAGE'  /* Blank with page    */
&MIXED = TRANS(&ZPDMIX N,EBCDIC *,MIX) /* set mixed format */
VGET (ztsohtit)
&ztitle = &ztsohtit
*REXX(* zdata zshadow zwidth)
  colorr = left('R',zwidth,'R')
  colorb = left('B',zwidth,'B')
  colorw = left('W',zwidth,'W')
  colorq = left('Z',zwidth,'Z')
  blank = left(' ',zwidth,' ')
  if datatype(zhead) /= 'NUM' then
  parse value '0 0 0 ' with zhead zmiddle ztrail
  if length(zshadow) /= length(zdata) then
  zshadow = left(' ',length(zdata),' ')
  keys = 'FUNCTION: SYNTAX: OPERANDS: FORMAT: DESCRIPTION:' ,
         'MESSAGES: SUBCOMMANDS: SUBCOMMAND: USAGE RETURN EXAMPLES'
  do i = 1 to length(zshadow) by zwidth
    fw = translate(word(substr(zdata,i+8,30),1))
    if wordpos(fw,keys) > 0 then
    Select
      when pos('EXAMPLES',translate(substr(zdata,i,50))) > 0 then do
        p = pos('EXAMPLES',translate(substr(zdata,i,50)))
        if p < 14 then do
          zshadow = overlay(colorw,zshadow,i+p-1,8)
        end
      end
      when pos('USAGE NOTES',translate(substr(zdata,i,50))) > 0 then do
        p = pos('USAGE NOTES',translate(substr(zdata,i,50)))
        if p < 10 then do
          zshadow = overlay(colorw,zshadow,i+p-1,11)
        end
      end
      when pos('RETURN CODES',translate(substr(zdata,i,50))) > 0 then do
        p = pos('RETURN CODES',translate(substr(zdata,i,50)))
        if p < 10 then do
          zshadow = overlay(colorw,zshadow,i+p-1,12)
        end
      end
      otherwise do
        fwl = length(fw)
        zshadow = overlay(colorw,zshadow,i+8,fwl)
      end
    end
  end
*ENDREXX
)REINIT
REFRESH(*)
IF (&ZVMODET = 'VIEW') .HELP = ISR10000  /* DEFAULT TUTORIAL NAME */
ELSE                   .HELP = ISR20000  /* DEFAULT TUTORIAL NAME */
)PROC
REFRESH(*)
&ZCURSOR = .CURSOR
&ZCSROFF = .CSRPOS
VPUT (ZSCED) PROFILE
&ZLVLINE = LVLINE(ZDATA)
)FIELD
FIELD(ZTITLE)
FIELD(ZCMD) LEN(255)
*/
)END
/* 5650-ZOS     COPYRIGHT IBM CORP 1980, 2013 */
/* ISPDTLC Release: 7.1.  Level: PID                                  */
/* z/OS 02.01.00.  Created - Date: 19 Nov 2014, Time: 18:25           */
)END
>msg ztso00
ZTSO001 '&SMSG'
'&LMSG'
>EXEC ztsohm
  /* rexx */
  Address ISREdit
  'Macro (option)'
  '(last) = linenum .zlast'
  '(tsocmd) = member'
  'hilite off'
  if last = 0 then do
     smsg = 'Not Found'
     lmsg = tsocmd 'is not a valid TSO Help member.'
     Address ISPExec 'setmsg msg(ztso001)'
     'Cancel'
     Exit 1
     end
  "DEFINE ztsohme MACRO CMD"
  "DEFINE END ALIAS ztsohme"
  "exclude '*' 1 all"
  "delete x all"
  'caps off'
  "find ')F' first"
  '(ff) = cursor'
  if ff > 1 then
  'delete 1' ff-1 'all'
  '(num) = number'
  if num = 'ON' then 'UnNum'
  'ztsofhlp'
  header = center('TSO Help:' tsocmd,80)
  'line_before 1 = (header)'
  dash = center('-',80,'-')
  'line_after 1 = (dash)'
  blanks = ' '
  'line_after 2 = (blanks)'
  'recovery off nowarn'
  Address ISPExec 'vget (ztsotest)'
  if ztsotest /= 1 then
     'Reset'
  "Find 'TSO Help:" tsocmd"' first"
  Address ISPExec
  'vget (ztsostat)'
  'LMFree dataid('ztsostat')'
  Exit 1
>EXEC ztsohme
 /* rexx */
  Address ISREdit
  'Macro (option)'
  "DEFINE END    RESET"
  'Cancel'
>EXEC ztsohcut
/* ------------------------------------------------------- *
 | Cut all data to the ISPF clipboard                      |
 * ------------------------------------------------------- */
 Address ISREdit
 'Macro (option)'
 'Cut'
 'End'
>EXEC ztsofhlp
/* --------------------  rexx procedure  -------------------- *
 | Name:      ZTSOFHLP                                        |
 |                                                            |
 | Function:  ISPF Edit Macro to reformat a TSO Help member   |
 |                                                            |
 | Author:    Lionel B. Dyck                                  |
 |                                                            |
 | History:  (most recent on top)                             |
 |            10/19/17 - Improve performance for )I processing|
 |            10/18/17 - Remove non-display chars             |
 |                     - Move messages )M to the end          |
 |            07/10/17 - Incorporated into ZTSOHELP           |
 |            07/10/17 - Creation                             |
 * ---------------------------------------------------------- */
  Address ISREdit
  'Macro (options)'
  '(number) = num'
  if number /= 'OFF' then 'UNNUM'
  blank = ' '
  hit = 0
  '(last) = linenum .zlast'
/* ---------------------------------------------- *
 | Process all Inserts before doing anything else |
 * ---------------------------------------------- */
  do forever
     'Find ")I " 1 first'
     if rc > 0 then leave
     '(i) = cursor'
     '(data) = line' i
     call do_inserts
     end
/* -------------------------------- *
 | Now move all messages to the end |
 * -------------------------------- */
  call move_messages
/* ------------------------------- *
 | Begin processing of the records |
 * ------------------------------- */
  '(last) = linenum .zlast'
  i = 0
  do forever
    i = i + 1
    '(data) = line' i
    if hit = 0 then
       if left(data,1) /= ')' then call delete
    if left(data,1) = ')' then leave
    end
  i = i - 1
  do forever
    i = i + 1
    '(data) = line' i
    Select
      When left(data,1) = '*' then do
        call delete
      end
      When left(data,2) = '))' then do
        parse value data with '))' record 73 x
        record = ' ' record
        call update_nb
      end
      When left(data,1) = '=' then do
        parse value data with '=' record
        record = 'Subcommand:' ,
                 translate(record,' ','=')
        call update
      end
      When left(data,2) = ')F' then do
        parse value data with ')F' record more 73 x
        record = 'Function:'
        call update
        more = strip(more)
        if left(more,1) = '-' then do
           parse var more '-' record
           iu = iu + 1
           record = left(' ',2) record
           "Line_After" i '= (record)'
           end
      end
      When left(data,2) = ')M' then do
        parse value data with ')M' record 73 x
        record = 'Messages:'
        call update
      end
      When left(data,2) = ')O' then do
        parse value data with ')O' record 73 x
        record = 'Operands:'
        call update
      end
      When left(data,2) = ')P' then do
        parse value data with ')P' record 73 x
        call update
      end
      When left(data,2) = ')S' then do
        parse value data with ')S' record 73 x
        record = 'Subcommands:'
        call update
      end
      When left(data,2) = ')X' then do
        parse value data with ')X' record 73 x
        record = 'Syntax:'
        call update
      end
      Otherwise nop
    end
   '(last) = linenum .zlast'
    if i = last then leave
  end
/* ----------------------------------------------- *
 | Remove any sequence numbers                     |
 | and remove any comments - * in column 2 as they |
 | are not useful                                  |
 * ----------------------------------------------- */
  "change p'########' ' ' 73 80 all"
  "Exclude '*' 2 all"
  "Del x all"
/* --------------------------------------- *
 | Now remove any duplicated blank records |
 * --------------------------------------- */
  '(last) = linenum .zlast'
  "c p'.' ' ' all"
  i = 1
  do forever
  i = i + 1
  '(last) = linenum .zlast'
  if i > last then do
     'locate 0'
     exit 1
     end
 '(data) = line' i
 if strip(data) = '' then do
   j = i + 1
   if j >= last then do
     'locate 0'
     exit 1
     end
   '(data) = line' j
   if strip(data) = '' then do
     'Label ' j '= .DEL'
     'Delete .del'
     '(last) = linenum .zlast'
     i = i - 1
     end
 end
  end
/* ------------------- *
 | Process all Inserts |
 * ------------------- */
 Do_Inserts:
    member = word(data,2)
    record = 'Include Help:' member
    'Label ' i '= .DEL'
    'Delete .DEL'
    i = i - 1
    "line_before" i "= noteline (record)"
    Address ISPExec
    'Vget (ztsostat)'
    'LMMFind Dataid('ztsostat') member('member')'
    if rc = 0  then do
      'View dataid('ztsostat') member('member') macro(ztsohcut)' ,
        'CHGWARN(NO)'
      Address ISREdit
      'Label ' i '= .PX'
      'Paste after .px'
      '(last) = linenum .zlast'
      end
 return
/* ---------------------------------------------- *
 | Move all messages to the end before processing |
 * ---------------------------------------------- */
 Move_Messages: Procedure
  '(last) = linenum .zlast'
  drop msgs.
  msgc = 1
  msgs.msgc = ' '
  msgf = 0
  do i = 1 to last
  if i > last then leave i
    '(data) = line' i
    if strip(data) = '' then iterate
    if left(data,3) = ')X ' then msgf = 0
    if left(data,3) = ')F ' then msgf = 0
    if left(data,3) = ')P ' then msgf = 0
    if left(data,3) = ')O ' then msgf = 0
    if left(data,3) = ')M ' then msgf = 1
    if msgf = 1 then do
       msgc = msgc + 1
       msgs.msgc = data
       'Label ' i '= .DEL'
       'Delete .DEL'
       '(last) = linenum .zlast'
       i = i - 1
       end
  end
  '(last) = linenum .zlast'
  do i = 1 to msgc
   data = msgs.i
   "Line_after" last " = (data)"
   last = last + 1
    end
 return

/* --------------- *
 | Delete a record |
 * --------------- */
Delete:
  'Label ' i '= .DEL'
  'Delete .del'
  i = i - 1
  last = last - 1
  return

/* -------------------------------------------- *
 | Insert a blank row above/below and change to |
 | a meaningful record.                         |
 * -------------------------------------------- */
Update:
  iu = 0
  record = strip(record,'T')
  "Line" i "= (record)"
  if i+1 < last then do
    '(data) = line' i +1
    if strip(data) /= '' then do
      iu = iu + 1
      "Line_after" i "= (blank)"
    end
  end
  if i > 1 then do
    '(data) = line' i -1
    if strip(data) /= '' then do
      iu = iu + 1
      "Line_before" i "= (blank)"
    end
  end
  i = i + iu
  last = last + iu
  return

/* -------------------------------------------- *
 | Remove the )) to make it a meaningful record |
 * -------------------------------------------- */
Update_nb:
  iu = 0
  record = strip(record,'T')
  "Line" i "= (record)"
  if i+1 < last then do
    '(data) = line' i +1
  end
  if i > 1 then do
    '(data) = line' i -1
    end
  i = i + iu
  last = last + iu
  return
>END
>DATA      Sample TSO Help Member directory information
/* keep the description to 53 characters to avoid truncation */
/* Group LOCAL is for local help members */
/* enclosed as a REXX comment to avoid REXX syntax errors
FREE:
PDS        Swiss Army Knife of Utilities
PDSEGEN    PDSE V2 Member Generations Dialog
PGLITE     PDSE V2 Member Generations Dialog (Fast)
ABE        A Better Editor
ABEND      TSO help member for abend codes
BLK3390    Disk block size optimizing
CDSCB      Zap Format-1 DSCB
COMPARE    Compare files
CONCAT     Permits the dynamic concatenation of DSN or DDNAME
DEX        Hexadecimal calculator
DSAT       Disk data set attributes display
DUDASD     Display DASD info similar to D U,DASD
DVOL       Disk free space display
EKKO       Issue a message using PUTLINE that can be trapped
FSE        Create or modify sequential data set or PDS member
FSH        Full screen help
FSHELP     Full screen help
HEL        Full-screen help
JULIAN     Convert date to/from Julian
LISTSPC    List space/allocation information for a dataset
MURPHY     Murphy's law
MXI        MVS eXtended Information
PRINTOFF   Obtain hardcopy of dataset
QLIST      Display a sequential data set or PDS member
RELEASE    Free up unused space from an existing dataset
REV        Review a z/OS dataset or USS file
REVED      Review a z/OS dataset of USS file using Edit
REVEDIT    Review a z/OS dataset or USS file using Edit
REVIEW     Full-screen file browser
REVLEV     Set the options for RFE (Review Front End)
REVOUT     Display the Review job status display
REVPDS     Display Review subcommands when reviewing a PDS
REVPDSE    Display Review subcommands when reviewing a PDSE
REVTSO     Doc for the RFE TSO option
REVUNIX    Display Review subcommands when reviewing a USS file
REVVSAM    Review a VSAM dataset
REXXFORM   Reformat REXX Code
RFE        Review front end
SHA1SUM    Display the SHA-1 hash of data sets
SHA2SUM    Display the SHA-256 hash of data sets
SHA224S    Display the SHA-224 hash of data sets
SHA3SUM    Display the SHA-384 hash of data sets
SHA5SUM    Display the SHA-512 hash of data sets
STEMEDIT   Browse/Edit/View REXX stem data
STEMPULL   Retrieve REXX stem variables
STEMPUSH   Share REXX stem variables across exec's
STEPLIB    TSO Dynamic Steplib command
VSAMANAL   Determine the physical space a VSAM dataset requires
VTOC       VTOC display
VTOCUTIL   List and Alter Format-1 DSCB Information
WHOSGOT    Display who is currently allocated to a specific dataset
XEPHON     Index to articles that have appeared in MVS Update
ZAP        Full-screen zap
RACF:
ADDGROUP   Add group profile
ADDSD      Add data set profile
ADDUSER    Add user profile
ALTDSD     Alter data set profile
ALTGROUP   Alter group profile
ALTUSER    Alter user profile
CONNECT    Connect user to group
DELDSD     Delete data set profile
DELGROUP   Delete group profile
DELUSER    Delete user profile
LISTDSD    List data set profile
LISTGRP    List group profile
LISTUSER   List user profile
OPERMIT    Unix Access Control List Management, like PERMIT
ORALTER    Unix Security Attribute Management, like ALTER
ORLIST     Unix File/Directory Security Info, like RLIST
PASSWORD   Specify user password
PERMIT     Maintain resource access lists
RACDCERT   Manage RACF digital certificates
RACLINK    Administer user ID associations
RACMAP     Create, delete, list, or query an identity filter
RACPRIV    Set write-down privileges
RALTER     Alter general resource profile
RDEFINE    Define general resource profile
RDELETE    Delete general resource profile
REMOVE     Remove user from group
RLIST      List general resource profile
RVARY      Change status of RACF database
SEARCH     Search RACF database
SETROPTS   Set RACF options
TSO:
ACCOUNT    Modify/add/delete user attributes in UADS
ALLOCATE   Allocate a data set with or without DCB parms
ALTLIB     Define user application sets of exec libraries
ATTRIB     Allow DCB parameters to be dynamically introduced
CALL       Load and execute the specified load module
CANCEL     Cancel background job
CONSOLE    Place terminal in console mode
CONSPROF   Define user console characteristics
EDIT       Create, edit, and/or execute a data set
EXEC       Invoke command procedure
EXECUTIL   Alter rexx environment
FREE       Release a data set and/or an attribute list
HELP       Invoke help processor
LINK       Invoke link prompter and linkage editor
LISTALC    Display active data sets
LISTBC     Display messages from operator/user
LISTDS     Display data set attributes
LOADGO     Load and execute program
LOGOFF     End terminal session
LOGON      Start terminal session
OPERATOR   Place terminal in operator mode
OUTDES     Create or reuse a dynamic output descriptor
OUTPUT     Direct output medium for background job
PARMLIB    List/update TSO/E defaults
PRINTDS    Print a data set
PROFILE    Define user characteristics
PROTECT    Password protect data sets
RACONVRT   UADS to RACF data base conversion utility
RECEIVE    Receive data sent to you by a transmit command
RENAME     Rename a data set
RUN        Compile, load, and execute program
SEND       Send message to operator/user
SM         Session manager commands
SMCOPY     Copy stream or data set to another stream or data set
SMFIND     Locate a string of characters in a stream
SMPUT      Place a text string in a stream
STATUS     List status of background job
SUBMIT     Submit background job
SYNC       Synchronize broadcast dataset with UADS and RACF
TERMINAL   Define terminal characteristics
TEST       Test user program
TESTAUTH   Test APF authorized programs
TIME       Log session usage time
TRANSMIT   Transmit messages and/or data sets via nodes
TSOEXEC    Execute an authorized/unauthorized command
TSOLIB     Define search that TSO/E uses for load modules
WHEN       Conditionally execute next command
XMIT       Transmit messages and/or data sets via nodes
TCPIP:
HOMETEST   Validate TCP/IP configuration
LPR        Print on remote printer
NETSTAT    Display the network status of the local host
NSLOOKUP   Query the DNS for host address or name
PING       See if host is available
TRACERTE   Trace route to host
HSM:
HALTERDS   Change backup frequency and number of backup versions
HBACKDS    Creates a backup version of one or more data sets
HBDELETE   Deletes specific backup versions of one or more data
HCANCEL    Cancels one or more existing queued DFSMShsm command
HDELETE    Deletes one or more migrated data sets
HLIST      List information from migration/backup control files
HMIGRATE   Migrates one or more data sets
HQUERY     List outstanding DFSMShsm requests for userid
HRECALL    Recalls one or more migrated data sets
HRECOVER   Recovers a backup version of one or more data sets
IDCAMS:
ALTER      Alter attributes in catalog entries
BLDINDEX   Build VSAM alternate indexes over a VSAM base cluster
CREATE     Define library and volume entries
DEFINE     Define user catalogs, clusters, alt indexes, paths
DEFCAT     A user catalog is to be defined
DEFSPACE   A data space is to be defined
DEFCL      A cluster is to be defined
DEFAIX     An alternateindex is to be defined
DEFPATH    A path is to be defined
DEFNVSAM   A NONVSAM data set is to be defined
DEFALIAS   Define an alias for a usercat or NON-VSAM dataset
DEFGDG     A generation data group entry is to be defined
DEFPGSPC   A page space entry is to be defined
DELETE     Delete VSAM objects or non-VSAM data sets
DIAGNOSE   Scan VSAM Volume Data Set (VVDS) or ICF Catalog
EXAMINE    Scan Index and/or Data components of VSAM KSDS
EXPORT     Move clusters, alternate indexes, usercat from system
IMPORT     Move clusters, alternate indexes, usercat into system
LISTCAT    Display user catalogued data sets
PRINT      List part or all of a sequential or VSAM dataset
REPRO      Copy VSAM clusters, alternate indexes, catalogs
RESETCAT   Recover catalog entries
VERIFY     Compare the end-of-data-set and end-of-key-range info
ISPF:
ISPF       Invoke ISPF
ISPSTART   Invoke ISPF at the Master Menu
PDF        Invoke ISPF
IPCS:
IPCS       Interactive Problem Control System
IPCSDDIR   Prepares a dump directory data set for dump analysis
OMVS:
BPXBATCH   Run shell commands, shell scripts, or executable files
BPXMTEXT   Display reason code text
BPXTRACE   Activate or deactivate traces for processes
ISH        Invoke UNIX System Services ISPF Shell
ISHELL     Invoke UNIX System Services ISPF Shell
MKDIR      Create a directory in the file system
MKNOD      Create a character special file
MOUNT      Logically mount a file system
OBROWSE    Browse a z/OS UNIX file
OCOPY      Copy member or HFS file to another member or file
OEDIT      Edit a z/OS UNIX file
OGET       Copy a z/OS UNIX file into an MVS data set
OGETX      Copy z/OS UNIX files from a directory to an MVS PDS
OMVS       Invoke UNIX System Services z/OS shell
OPUT       Copy an MVS data set member into a z/OS UNIX file
OPUTX      Copy members from an MVS PDS to a z/OS UNIX directory
OSHELL     Invoke BPXBATCH from TSO/E
OSTEPLIB   Build a list of files
UNMOUNT    Remove a file system from the file hierarchy
ZLSOF      Displays details about OMVS (files, sockets, pipes)
TSSO:
CACHE      Control the operation of 3880 cache devices
CPCMD      Issue CP commands on a VM system
DISPAOF    Display the contents of TSSO/AOF tables
LNKLIST    Display data sets in MVS LNKLST concatenation
OSASK      Ask the operator a question and get a response
OSCMD      Issue any MVS command (JES2, VTAM, etc.)
OSPAUSE    Delays processing of a command for nnn seconds
OSWTO      Write message to the operators console
REPLY      Reply to WTOR message after it appears on console
SPMON      Display MVS system information
VOLSER     Display UCB and allocation information
SDSF:
SDSF       Invoke SDSF as a TSO command processor
EJES:
EJES       Invoke EJES as a TSO command process
RMF:
RMF        Resource Measurement Facility
BDT:
BDT        Bulk Data Transfer
RMM:
RMM        DFSMSrmm - Removable Media Manager
RMMAB      Add bin
RMMAD      Add data set information
RMMAO      Add owner
RMMAP      Add program product
RMMAR      Add rack
RMMAS      Add vital record specification
RMMAV      Add volume
RMMCD      Change data set information
RMMCO      Change owner
RMMCP      Change program product
RMMCV      Change volume
RMMCS      Change VRS
RMMDB      Delete bin
RMMDD      Delete data set information
RMMDO      Delete owner
RMMDP      Delete program product
RMMDR      Delete rack
RMMDS      Delete vital record specification
RMMDV      Delete volume
RMMGV      Get a volume
RMMLB      List bin
RMMLC      List control options
RMMLD      Display data set information
RMMLO      Display owner information
RMMLP      Display product information
RMMLR      Display rack information
RMMLS      Display vital record specifications
RMMLV      Display volume information
RMMSB      Search bin
RMMSD      Search data set information
RMMSO      Search owner
RMMSP      Search program product
RMMSR      Search rack
RMMSS      Search vital record specifications
RMMSV      Search volume
CADISK:
DARCHIVE   Deferred Archive
DERASE     Erase a Deferred Request
DRESTORE   Deferred Restore
LISTDMS    List the Archive Index
LISTREQ    List Status of Deferred Requests
RESTORE    Immediate Restore
ACF2:
ACF        Access Control Facility Security
ACFCOMP    Compile and store a set of ACF2 rules
ACFNRULE   Decompile, modify, compile, store a set of ACF2 rules
ACFRULES   ACF2 dataset access rule syntax and semantics
LIBR:
LIBADD     Add a module to a LIBRARIAN master file
LIBGET     Copy a LIBRARIAN module into a TSO data set
LIBSAVE    Update a LIBRARIAN module from a previous LIBGET
LIBDLM     Delete a module from a LIBRARIAN master file
LIBINDEX   Index a programmer's LIBRARIAN modules
LIBLIST    List information about a LIBRARIAN module
LIBCTL     Lists all outstanding modules from previous LIBGET
LIBEXP     Export a module to a LIBRARIAN master file
REXX:
REXX       Rexx language commands
TCPIP:
DIG        Query Name Servers
FTP        File Transfer Protocol (FTP) command
FREE:
CPSCB      Change TSO user's PSCB (Protected Step Control Block)
LPSCB      List TSO user's PSCB (Protected Step Control Block)
LOCAL:
RRGEN      RRGEN programming facility for System/360
IBMPREFX   IBM prefixes for MVS components
PDSEDIT    PDS batch edit program
TESTUSER   User-written TEST subcommands (LBPTS, LG, and FIND)
RACF:
RDADD      RACDCERT ADD (Add certificate)
RDADDRIN   RACDCERT ADDRING (Add key ring)
RDADDTOK   RACDCERT ADDTOKEN (Add token)
RDALTER    RACDCERT ALTER (Alter certificate)
RDALTMAP   RACDCERT ALTMAP (Alter mapping)
RDBIND     RACDCERT BIND (Bind certificate to token)
RDCHECKC   RACDCERT CHECKCERT (Check certificate or certificate chain)
RDCONNEC   RACDCERT CONNECT (Connect a certificate to key ring)
RDDELETE   RACDCERT DELETE (Delete certificate)
RDDELMAP   RACDCERT DELMAP (Delete mapping)
RDDELRIN   RACDCERT DELRING (Delete key ring)
RDDELTOK   RACDCERT DELTOKEN (Delete token)
RDEXPORT   RACDCERT EXPORT (Export certificate package)
RDGENCER   RACDCERT GENCERT (Generate certificate)
RDGENREQ   RACDCERT GENREQ (Generate request)
RDIMPORT   RACDCERT IMPORT (Import certificate)
RDLIST     RACDCERT LIST (List certificate)
RDLISTCH   RACDCERT LISTCHAIN (List certificate chain)
RDLISTMA   RACDCERT LISTMAP (List mapping)
RDLISTRI   RACDCERT LISTRING (List key ring)
RDLISTTO   RACDCERT LISTTOKEN (List token)
RDMAP      RACDCERT MAP (Create mapping)
RDREKEY    RACDCERT REKEY (Rekey certificate)
RDREMOVE   RACDCERT REMOVE (Remove certificate from key ring)
RDROLLOV   RACDCERT ROLLOVER (Rollover certificate)
RDUNBIND   RACDCERT UNBIND (Unbind certificate from token)
SHELF:
ASMSH030   HLASM for z/OS & z/VM & z/VSE R6 Bookshelf
DZ9ZBK03   z/Architecture Principles of Operation Bookshelf
DCF:
SCRIPT     Invoke SCRIPT/VS to format a document
>END */
